import java.util.*;

class HelloWorld {
    static class Edge{
        int u;
        int v;
        int weight;
        public Edge(int u, int v, int weight){
            this.u = u;
            this.v = v;
            this.weight = weight;
        }
    }
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        int n = scan.nextInt();
        int m = scan.nextInt();
        ArrayList<ArrayList<Edge>> graph = new ArrayList<>();
        for(int i=0; i<=n; i++){
            graph.add(new ArrayList<Edge>());
        }
        for(int i=0; i<m; i++){
            int u = scan.nextInt();
            int v = scan.nextInt();
            int wt = scan.nextInt();
            graph.get(u).add(new Edge(u, v, wt));
        }
        int[] res = dijkstra(graph, 1, n);
        for(int ele : res){
            System.out.print(ele + " ");
        }
        System.out.println();
    }
    public static int[] dijkstra(ArrayList<ArrayList<Edge>> graph, int s, int n){
        int[] dist = new int[n+1];
        for(int i=1; i<=n; i++){
            dist[i] = Integer.MAX_VALUE;
        }
        boolean[] vis = new boolean[n+1];
        PriorityQueue<int[]> pq =  new PriorityQueue<int[]>((a, b) -> a[0] - b[0]);
        pq.add(new int[]{0, s});
        dist[s] = 0;
        while(!pq.isEmpty()){
            int wt = pq.peek()[0];
            int u = pq.peek()[0];
            pq.poll();
            if(vis[u])
                continue;
            vis[u] = true;
            Iterator<Edge> itr = graph.get(u).listIterator();
            while(itr.hasNext()){
                Edge e = itr.next();
                if(dist[e.v] > (e.weight + wt)){
                    dist[e.v] = e.weight + wt;
                    pq.add(new int[]{dist[e.v], e.v});
                }
            }
        }
        return dist;
    }
}
