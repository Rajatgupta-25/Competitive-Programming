import java.util.*;

class HelloWorld {
    public static class Suffix implements Comparable<Suffix>{
        int index;
        int rank;
        int next;
        public Suffix(int ind, int r,  int n){
            this.index = ind;
            this.rank = r;
            this.next = n;
        }
        public int compareTo(Suffix s){
            if(rank != s.rank)
                return Integer.compare(rank, s.rank);
            return Integer.compare(next, s.next);
        }
    }
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        String str = scan.next();
        int[] suff = suffixArray(str);
        for(int i=0; i<suff.length; i++){
            System.out.print(suff[i] + " ");
        }
        System.out.println();
    }
    public static int[] suffixArray(String str){
        int n = str.length();
        Suffix[] suff = new Suffix[n];
        
        // Store suffixes and their indexes in
        // an array of classes. The class is needed
        // to sort the suffixes alphabetically and
        // maintain their old indexes while sorting
        
        for(int i=0; i<n; i++){
            suff[i] = new Suffix(i, str.charAt(i) - '$', 0);
        }
        for(int i=0; i<n; i++){
            if(i+1 < n)
                suff[i].next = suff[i+1].rank;
            else
                suff[i].next = -1;
        }
        // Sort the suffixes using the comparison function
        // defined above.
        Arrays.sort(suff);
        
        // At this point, all suffixes are sorted
        // according to first 2 characters.
        // Let us sort suffixes according to first 4
        // characters, then first 8 and so on
        
        int[] ind = new int[n];
        for(int length = 4; length<2*n; length<<=1){
            // Assigning rank and index values to first suffix
            int rank = 0, prev = suff[0].rank;
            suff[0].rank = rank;
            ind[suff[0].rank] = 0;
            for(int i=1; i<n; i++){
                
                // If first rank and next ranks are same as
                // that of previous suffix in array,
                // assign the same new rank to this suffix
                
                if(suff[i].rank == prev && suff[i].next == suff[i-1].next){
                    prev = suff[i].rank;
                    suff[i].rank = rank;
                }else{
                    
                    // Otherwise increment rank and assign
                    
                    prev = suff[i].rank;
                    suff[i].rank = ++rank;
                }
                ind[suff[i].index] = i;
            }
            
            // Assign next rank to every suffix
            for(int i=0; i<n; i++){
                int nextP = suff[i].index + length/2;
                if(nextP < n)
                    suff[i].next = suff[ind[nextP]].rank;
                else
                    suff[i].next = -1;
            }
            
            // Sort the suffixes according
            // to first k characters
            
            Arrays.sort(suff);
        }
        
        // Store indexes of all sorted
        // suffixes in the suffix array
        int[] su = new int[n+1];
        su[0] = n;
        for(int i=1; i<=n; i++){
            su[i] = suff[i-1].index;
        }
        return su;
    }
}
